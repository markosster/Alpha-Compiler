nl = "\n";
function println() {
	local argc = totalarguments();
	for (local i = 0; i < argc; ++i)
		::print(argument(i));
	::print(::nl);
}

/*
t1 = [ {"()" : (function(t){ print(t, "\n"); }) } ];
t1(); // prints content of t

function constmaker(c) {
    return [{"c" : c},
            {"()" : (function(t){return t.c;})}
            ];
}

c10 = constmaker(10);
print(c10(), "\n"); // prints '10'

chello = constmaker("hello");
print(chello(), "\n"); // prints 'hello'

f = [ 
        {"i" : 0},
        {"()" : (function(t){
                    ++t.i;
                    if (t.i % 2 == 0)
                        print("f()");
                    return t; // Still a functor.
                })}
    ];

f()()()(); // prints 'f()f()'

function Point(x, y) {
    return [
        {"x": x},
        {"y": y},
        {"move": (function (this, dx, dy){
            this.x = this.x + dx;
            this.y = this.y + dy;
        })}
    ];
}
pt = Point(20, 30);
print(pt, "\n");
pt.move(pt, -1, -2);
print(pt, "\n");
pt..move(-1, -2);
print(pt, "\n");

function Square(p1, p2) {
    return [
        {"p1": p1},
        {"p2": p2},
        {"move": (function (this, dx, dy){
            this.p1..move(dx, dy);
            this.p2..move(dx, dy);
        })}
    ];
}
sq = Square(Point(10, 20), Point(30, 40));
print(sq, "\n");
sq..move(-4, -8);
print(sq, "\n");
*/

/*
t = [10, 20, 30, 40, "hello"];
println(t);
t.asf = "asf";
println(t);
t.a = [1, 2, 3, 4, "world"];
println(t);
t.a.b = [1.1, 2.2, 3.3, 4.4, "ok"];
println(t);
*/

t = [ {4: 8}, {"edw": 1}, {"csd": "oof"}, {5: 10}];
println(t);
